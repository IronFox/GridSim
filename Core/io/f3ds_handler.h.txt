#ifndef f3ds_handlerH
#define f3ds_handlerH
#include <stdio.h>

/******************************************************************************************

depreciated 3ds-chunk-reader.

This file is part of the DeltaWorks-Foundation or an immediate derivative core application.
Original Author: Stefan Elsen
Copyright (C) 2006 University of Trier, Computer Science Department, Germany.

A royalty-free, non-exclusive, perpetual right to read, modify, compile,
and/or use this file in any way suited is hereby granted to all students and associates
of the Computer Science Department of the University of Trier.
This right may be granted to other individuals or parties in any modified form as well
as denied to any member of the above mentioned group by the Auhorities of the
Computer Science Department of the University of Trier.

The right granted in the above section is expressly made subject to and limited by the
following conditions and restrictions:
a) Any modifications to this file must be made available to the Computer Science Department
of the University of Trier.
b) Disclosure of this file, modified or unmodified, in parts or in its entirety to third
parties is strictly prohibited.

All rights and privileges that have not explicitly been granted are reserved.

THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

******************************************************************************************/




class C_3dsFile;
struct C_3dsChunkInfo;
//---------------------------------------------------------------------------


extern WORD MapID[];

#define STRZ            -1
#define ARRAY0          -2
#define ARRAY1          -3
#define ARRAY2          -4
#define ARRAY3          -5
#define ARRAY4          -6
#define ARRAY5          -7
#define ARRAY6          -8
#define ARRAY7          -9

#define COUNT_U8        1
#define COUNT_U16       2
#define COUNT_U32       4


struct S_3dsChunkInfo
{
        unsigned    addr;
        unsigned    index;
        unsigned    size,head_size;
        WORD        id;
};


struct S_3dsMap
{
        char        file_name[256];
        double      scale[2],offset[2],rotation;
        bool        set;
};


struct S_3dsMaterial
{
        char        name[64];
        float       ambient[3],
                    diffuse[3],
                    specular[3],
                    shininess,
                    shininess_strength;
        S_3dsMap    map[16];
        void       *link;
};



class C_3dsFile
{
private:
        FILE           *f;

        unsigned long   reg_combo[1024];
        unsigned        reg_combo_cnt;
        S_3dsChunkInfo  chunk,marked,history[1024];
        unsigned        hcnt;
        unsigned        file_size;
        char*           file_name;
        bool            streaming;

        WORD            ar_def_cnt[8],ar_def_size[8];

        void            mark();
        void            recall();
        bool            enterWrite();
        void            exitWrite();
        void            reLocate();

public:
                        C_3dsFile();
virtual                ~C_3dsFile();
        bool            open(const char*filename);
        bool            reOpen();
        bool            create(const char*filename);
        void            close();
        void            reset();
        bool            first();
        bool            next();
        void            reg(WORD id, short head_data_size);  //head-data-size can be negative for non-static-data-blocks
        void            reg(WORD id);
        void            defArray(short array_id, WORD count, WORD data_size);
        bool            findFirst(WORD id);
        bool            findNext(WORD id);
        bool            select(unsigned index);
        bool            enter();
        void            forceEnter();
        bool            dropBack();
        unsigned        getSize();
        short           getHeadSize();
        WORD            getID();
        unsigned        getIndex();
        unsigned        get(void*out);
        const char*     getHexIDString();
        
        void            openStream();
        void            stream(int size, void*pntr, unsigned max_size=0xFFFFFFFF);
        void            closeStream();

        bool            insertData(WORD id, void*head_data);
        bool            insertData(WORD id, void*data, unsigned size);

template <class C> bool insert(WORD id,C&data);
template <class C> bool insert(WORD id,C*array, unsigned len);

        //specific stuff:

        void            smartConvertChunk(float*out);
        unsigned        countMaterials();
        unsigned        getMaterials(S_3dsMaterial*out);
};

#include "f3ds_handler.tpl.h"

#endif
