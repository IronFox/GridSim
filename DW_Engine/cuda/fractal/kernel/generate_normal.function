	
	DEVICE_RESOURCE(TVertexInfo,info) = info_field[linear];

	TVertex	&v = vertices[linear];
	float	*normal = 
	#if NORMAL_GENERATION == DOUBLE_NORMAL_STORAGE
		v.base_normal;
	#else
		v.normal;
	#endif
	dvClear(normal);
	
	
	if (info.y > 0)
	{
		if (info.x > 0)
		{
			doAddTriangleNormal(vertices[vertexIndex(info.x-1,info.y-1)].position,vertices[vertexIndex(info.x-1,info.y)].position,v.position,normal);
		}

		if (info.x < info.y)
		{
			if (info.x > 0)
			{
				doAddTriangleNormal(vertices[vertexIndex(info.x,info.y-1)].position,vertices[vertexIndex(info.x-1,info.y-1)].position,v.position,normal);
			}
			doAddTriangleNormal(vertices[vertexIndex(info.x+1,info.y)].position,vertices[vertexIndex(info.x,info.y-1)].position,v.position,normal);
		}
	}
	
	if (info.y < max_row)
	{
		if (info.x > 0)
		{
			doAddTriangleNormal(vertices[vertexIndex(info.x-1,info.y)].position,vertices[vertexIndex(info.x,info.y+1)].position,v.position,normal);
		}
		doAddTriangleNormal(vertices[vertexIndex(info.x,info.y+1)].position,vertices[vertexIndex(info.x+1,info.y+1)].position,v.position,normal);
		if (info.x < info.y)
			doAddTriangleNormal(vertices[vertexIndex(info.x+1,info.y+1)].position,vertices[vertexIndex(info.x+1,info.y)].position,v.position,normal);
	}
	
	dvC3(normal,v.normal);
