	#ifdef KERNEL_ALLOW_DEBUG
	
		ARRAY_DEBUG_POINT(c,linear)
		unsigned index = edge[linear];
		ARRAY_DEBUG_POINT(c,index)
		
		DEVICE_RESOURCE(TVertexInfo,this_info) = info_field[index];

		ARRAY_DEBUG_POINT(c,index)
		TVertex	&this_v = this_surface.vertex[index];
		
		ARRAY_DEBUG_POINT(c,edge_length-linear-1)
		index = neighbor_edge[edge_length-linear-1];
		ARRAY_DEBUG_POINT(c,index)
		TVertex	&that_v = that_surface.vertex[index];
		DEBUG_POINT(c)
	#else
		unsigned index = edge[linear];
		DEVICE_RESOURCE(TVertexInfo,this_info) = info_field[index];
		TVertex	&this_v = this_surface.vertex[index];
		TVertex	&that_v = that_surface.vertex[neighbor_edge[edge_length-linear-1]];
	#endif
	
	if (!this_info.grid_vertex)
	{
		#ifdef KERNEL_ALLOW_DEBUG
			DEBUG_POINT(c)
		#endif
		//DEVICE_RESOURCE(TVertexInfo,that_info) = info_field[neighbor_edge[edge_length-linear-1]];
		float delta[3];
		dvSub(that_surface.sector,this_surface.sector,delta);
		dvMult(delta,context.sector_size);
		
		//bool forward = this_surface.vertex[this_info.parent0].position[0]<this_surface.vertex[this_info.parent1].position[0];
		//unsigned edge_linear = linear;
		//if (!forward)
			//edge_linear = edge_length-1-linear;
		//int seed = this_surface.outer_seed[this_info.edge_index]+(((edge_linear*15+3)*(edge_linear*11+2)));
		//if ((linear%2)!=0)
		#ifdef KERNEL_ALLOW_DEBUG
			DEBUG_POINT(c)	//last known stable position. error is in either local or more likely remote vertex field. last known array index is valid. array pointer is not NULL. => pointer corruption
		#endif
		{
			if (copy_to)
			{
				that_v = this_v;
				dvSub(this_v.position,delta,that_v.position);
			}
			else
			{
				this_v = that_v;
				dvAdd(that_v.position,delta,this_v.position);
			}
		}
	}
	#ifdef KERNEL_ALLOW_DEBUG
		DEBUG_POINT(c)
	#endif
	